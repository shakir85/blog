<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>grasping essentials on Shakir</title><link>https://demo.stack.jimmycai.com/tags/grasping-essentials/</link><description>Recent content in grasping essentials on Shakir</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 04 Oct 2023 21:22:40 -0700</lastBuildDate><atom:link href="https://demo.stack.jimmycai.com/tags/grasping-essentials/index.xml" rel="self" type="application/rss+xml"/><item><title>Mounting AWS EBS volumes</title><link>https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/</link><pubDate>Wed, 04 Oct 2023 21:22:40 -0700</pubDate><guid>https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/</guid><description>&lt;p>This post is designed for those new to AWS, showing the steps to attach a new EBS volume and mount it in the operating system. The goal of mounting a data volume is to maintain a clear separation between your application data and the operating-system&amp;rsquo;s data.&lt;/p>
&lt;p>Initializing EBS volumes is important also when working with Auto Scaling Groups (ASG). Auto Scaling Groups use launch templates, which contain information such as the Amazon Machine Image (AMI), SSH keys, and more, to deploy new EC2 instances during scaling events. An AMI captures the state of the root volume and any additional attached EBS volumes, including their mount points. If you attach an EBS volume, mount it to a specific directory like &lt;code>/foo&lt;/code>, and then create an AMI from that EC2 instance, the information about the attached EBS volume and its mount point will be preserved.&lt;/p>
&lt;h2 id="requrements">Requrements&lt;/h2>
&lt;ul>
&lt;li>AWS account (duh!)&lt;/li>
&lt;li>Adequate IAM permissions for EC2 and EBS (launch, attach/detach volumes).&lt;/li>
&lt;li>Basic familiarity with Linux storage mechanisms.&lt;/li>
&lt;/ul>
&lt;p>Before we start, I&amp;rsquo;d like to mention that all the steps here can be automated using the AWS CLI/SDK, or your preferred Infrastructure as Code (IaC) tool. In this instance, we&amp;rsquo;ll walk through the console setup for clarity.&lt;/p>
&lt;p>&lt;strong>Disclaimer&lt;/strong>
This post will focus on provisioning a new volume, including the formatting process. Adding a new partition to a partially used volume is beyond the scope of this blog, and following the steps below will effectively wipe all the content from the specified volume.&lt;/p>
&lt;h2 id="step-1-create-an-ebs-volume">Step 1: Create an EBS volume&lt;/h2>
&lt;p>Set your volume settings as you wish, just make sure it&amp;rsquo;s in the same AZ as the target EC2 instance.&lt;/p>
&lt;p>&lt;img src="https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/ebs_console.png"
width="1003"
height="163"
srcset="https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/ebs_console_hu586866867ef7bb85bb64951273e36b6a_22832_480x0_resize_box_3.png 480w, https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/ebs_console_hu586866867ef7bb85bb64951273e36b6a_22832_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="EBS Console"
class="gallery-image"
data-flex-grow="615"
data-flex-basis="1476px"
>&lt;/p>
&lt;h2 id="step-2-attache-the-ebs-volume-to-your-ec2-instance">Step 2: Attache the EBS volume to your EC2 instance&lt;/h2>
&lt;p>My running EC2 instance is called &lt;code>webserver&lt;/code> and I will name the volume as &lt;code>/dev/sdb&lt;/code>. This volume name should be reflected in the &lt;code>/dev&lt;/code> directory once the volume is attached successfully.&lt;/p>
&lt;p>&lt;img src="https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/attach_volume.png"
width="1001"
height="369"
srcset="https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/attach_volume_hu493b8332ecf777654479efac5cf5a81f_43316_480x0_resize_box_3.png 480w, https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/attach_volume_hu493b8332ecf777654479efac5cf5a81f_43316_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Select attach"
class="gallery-image"
data-flex-grow="271"
data-flex-basis="651px"
>&lt;/p>
&lt;p>&lt;img src="https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/attach_volume_2.png"
width="812"
height="603"
srcset="https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/attach_volume_2_hu663c1ac1ae1c854b5977df412b30f046_48454_480x0_resize_box_3.png 480w, https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/attach_volume_2_hu663c1ac1ae1c854b5977df412b30f046_48454_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Attach and choose volume name"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="323px"
>&lt;/p>
&lt;p>Once attachment is successful, you should see the new volume in the main console&lt;/p>
&lt;p>&lt;img src="https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/attach_volume_3.png"
width="1011"
height="601"
srcset="https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/attach_volume_3_hu0acbd8792bdbac1a130b36384195c484_78046_480x0_resize_box_3.png 480w, https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/attach_volume_3_hu0acbd8792bdbac1a130b36384195c484_78046_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Check attached volumes"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="403px"
>&lt;/p>
&lt;h2 id="step-3-configure-the-new-volume">Step 3: Configure the new volume&lt;/h2>
&lt;p>When you add a new EBS volume to an EC2 instance in AWS, you generally need to follow similar steps as you would with on-premises servers. What we did above is just attaching a disk to a server, exactly like you would do on a physial server (or a volume to a VM in a type 1 hypervisor).&lt;/p>
&lt;p>So we need to SSH into the server and do configure the volume.&lt;/p>
&lt;h3 id="ssh-into-the-ec2-instance">SSH into the EC2 Instance&lt;/h3>
&lt;p>Make sure you have proper permissions to format, partition, and mount disks.&lt;/p>
&lt;h3 id="identify-the-new-volume">Identify the New Volume&lt;/h3>
&lt;p>Run the &lt;code>lsblk&lt;/code> (List Block Devices) command and list all disks on the system and try to identify the newly added volume&lt;/p>
&lt;p>&lt;img src="https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/lsblk.png"
width="499"
height="127"
srcset="https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/lsblk_hua2ec3f26f00d09c1db417ec4cc684c55_13914_480x0_resize_box_3.png 480w, https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/lsblk_hua2ec3f26f00d09c1db417ec4cc684c55_13914_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Showing the new volume"
class="gallery-image"
data-flex-grow="392"
data-flex-basis="942px"
>&lt;/p>
&lt;p>The &lt;code>lsblk&lt;/code> command is handy for checking disk information, including where a disk is mounted. If you look at the output above, you&amp;rsquo;ll see that our recently added volume isn&amp;rsquo;t mounted yet. You might also wonder why it&amp;rsquo;s labeled as &lt;code>xvdb&lt;/code> instead of the expected &lt;code>sdb&lt;/code>. This change is due to a new naming system in the Linux kernel. Take a look at the highlighted box in the previous screenshot for more details&lt;/p>
&lt;p>&lt;img src="https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/kernel_name.png"
width="602"
height="129"
srcset="https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/kernel_name_hu28587522a050aa5cc12fa307dcd6fc43_16153_480x0_resize_box_3.png 480w, https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/kernel_name_hu28587522a050aa5cc12fa307dcd6fc43_16153_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Volume naming notice"
class="gallery-image"
data-flex-grow="466"
data-flex-basis="1120px"
>&lt;/p>
&lt;h3 id="install-a-partition-table">Install a partition table&lt;/h3>
&lt;p>Once the disk is identified, we need to install a partition table.&lt;/p>
&lt;blockquote>
&lt;p>A partition table is a data structure on a storage device that defines the sections used for organizing data on the disk.&lt;/p>
&lt;/blockquote>
&lt;p>Run the &lt;code>fdisk&lt;/code> command and follow the instructions specfied in the code block below&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">$ sudo fdisk /dev/sdb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Welcome to fdisk (util-linux 2.37.4).
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Changes will remain in memory only, until you decide to write them.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Be careful before using the write command.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Device does not contain a recognized partition table.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Created a new DOS disklabel with disk identifier 0xf8a58774.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Command (m for help): g
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Created a new GPT disklabel (GUID: AC3E4A5C-F60F-5B42-85BB-B019A99EB6D0).
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Command (m for help): n
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Partition number (1-128, default 1):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">First sector (2048-209715166, default 2048):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-209715166, default 209715166):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Created a new partition 1 of type &amp;#39;Linux filesystem&amp;#39; and of size 100 GiB.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Command (m for help): w
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The partition table has been altered.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Calling ioctl() to re-read partition table.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Syncing disks.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>Enter &lt;code>g&lt;/code> and hit enter, this will create a GPT partition table.&lt;/li>
&lt;li>Enter &lt;code>n&lt;/code> and hit enter, this will create new partitio.&lt;/li>
&lt;li>Hit Enter, this will instruct &lt;code>fdisk&lt;/code> to use all the free space in the disk to the new partition.&lt;/li>
&lt;li>Enter &lt;code>w&lt;/code> and hit enter, this will write the new partition to the disk.&lt;/li>
&lt;/ol>
&lt;h3 id="check-device-partitions">Check device partitions&lt;/h3>
&lt;p>The &lt;code>/dev&lt;/code> directory is where device files are located, and devices like hard drives can have sequential names and additional entries representing partitions. For example, if you have a device named /dev/sdb, it might be the entire storage device. The partitions on that device are then represented by appending a number to the device name, such as /dev/sdb1, /dev/sdb2, and so on.&lt;/p>
&lt;p>So now we have our disk device and it has one partition (from the previous step), we should see the following devices &lt;code>/dev/sdb&lt;/code> and &lt;code>/dev/sdb1&lt;/code> in &lt;code>/dev&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/dev_dir.png"
width="846"
height="347"
srcset="https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/dev_dir_hu716a953821f020c08c21d6be368b7b8f_87259_480x0_resize_box_3.png 480w, https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/dev_dir_hu716a953821f020c08c21d6be368b7b8f_87259_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Check the /dev directory"
class="gallery-image"
data-flex-grow="243"
data-flex-basis="585px"
>&lt;/p>
&lt;h3 id="create-a-file-system">Create a file system&lt;/h3>
&lt;p>Use the &lt;code>mkfs&lt;/code> tool to create a file system on the new partition.&lt;/p>
&lt;p>&lt;img src="https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/make_filesystem.png"
width="783"
height="231"
srcset="https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/make_filesystem_huc8df658e6ddbd645a573ba68068df207_37616_480x0_resize_box_3.png 480w, https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/make_filesystem_huc8df658e6ddbd645a573ba68068df207_37616_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Make a file system"
class="gallery-image"
data-flex-grow="338"
data-flex-basis="813px"
>&lt;/p>
&lt;p>The &lt;code>-t&lt;/code> option allows us to select the type of the file system; in this case, I will use &lt;code>ext4&lt;/code>. The &lt;code>-L&lt;/code> option can be any meaningful name for your volume. We will use that label in the &lt;code>LABEL&lt;/code> option in the next step when we mount the file system, so be sure to use a helpful name.&lt;/p>
&lt;h3 id="mount-the-new-file-system">Mount the new file system&lt;/h3>
&lt;p>Create a new directory (or use an existing one), and mount the new file system to it&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo mount &lt;span class="nv">LABEL&lt;/span>&lt;span class="o">=&lt;/span>ebs001 /ebs001
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Check the mount point&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ls /ebs001
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lost+found
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Let&amp;rsquo;s add a file to it for testing&lt;/p>
&lt;p>&lt;img src="https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/test_file.png"
width="520"
height="91"
srcset="https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/test_file_hud37cba6e2fad2ae84a226b070595f91b_8965_480x0_resize_box_3.png 480w, https://demo.stack.jimmycai.com/p/mounting-aws-ebs-volumes/test_file_hud37cba6e2fad2ae84a226b070595f91b_8965_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Alt text"
class="gallery-image"
data-flex-grow="571"
data-flex-basis="1371px"
>&lt;/p>
&lt;p>The volume is now ready, allowing the EBS volume to easily be detached from its current EC2 instance and attached to another instance without any data loss. This volume is ideal for storing your application data, such as serving as a mount point for a Docker volume, which will keep the application data separated from the EC2 root volume at all times.&lt;/p></description></item><item><title>Docker CMD and ENTRYPOINT differences</title><link>https://demo.stack.jimmycai.com/p/docker-cmd-and-entrypoint-differences/</link><pubDate>Sun, 16 Jul 2023 17:34:13 -0700</pubDate><guid>https://demo.stack.jimmycai.com/p/docker-cmd-and-entrypoint-differences/</guid><description>&lt;p>In this post, I will demonstrate how &lt;code>ENTRYPOINT&lt;/code> and &lt;code>CMD&lt;/code> work together, their differences, and how to redirect the runtime execution flow from &lt;code>ENTRYPOINT&lt;/code> to the &lt;code>CMD&lt;/code> where the main application&amp;rsquo;s command is executed.&lt;/p>
&lt;h2 id="the-way-entrypoint-and-cmd-work-together">The way &lt;code>ENTRYPOINT&lt;/code> and &lt;code>CMD&lt;/code> work together&lt;/h2>
&lt;p>In most cases, &lt;code>CMD&lt;/code> and &lt;code>ENTRYPOINT&lt;/code> instructions can be used interchangeably. Also, you do not have to use both of them together in every Dockerfile you develop. However, each instruction offers additional features that can help you control how you want to run your application. Before moving forward, let&amp;rsquo;s quickly review what each instruction does:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>ENTRYPOINT&lt;/code> is like the &amp;ldquo;main command&amp;rdquo; or the starting point for your container. It&amp;rsquo;s the default action the container takes when you run it. You might use &lt;code>ENTRYPOINT&lt;/code> to start a web server or run a specific application.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>CMD&lt;/code> can be used to provide additional arguments or options to the command specified in &lt;code>ENTRYPOINT&lt;/code>. It&amp;rsquo;s like saying, &amp;ldquo;When you start the container using the &lt;code>ENTRYPOINT&lt;/code> command, here are some extra args to pass to the executing app&amp;rdquo;. It is often used to pass &lt;em>default&lt;/em> arguments to &lt;code>ENTRYPOINT&lt;/code>. Note that we said: &amp;ldquo;default arguments&amp;rdquo; which we&amp;rsquo;ll explain what does that mean in a bit.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>So, &lt;code>ENTRYPOINT&lt;/code> sets the main command of the container, and &lt;code>CMD&lt;/code> provides default arguments to that command. Here is an example:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> ubuntu&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENTRYPOINT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;echo&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;Hello world&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Running a container from this Dockerfile is similar to executing &lt;code>echo &amp;quot;Hello world&amp;quot;&lt;/code> in the command line. The &lt;code>echo&lt;/code> is the main app and &lt;code>Hello world&lt;/code> is the argument. Similarly, in the Dockerfile above, the content of the &lt;code>CMD&lt;/code> instruction is passed to the &lt;code>ENTRYPOINT&lt;/code> as the default argument. when we build and run the container without arguments it will print &amp;ldquo;Hello world&amp;rdquo;:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">docker build -t &lt;span class="nb">test&lt;/span> .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker run &lt;span class="nb">test&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Hello world
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="overriding-cmd">Overriding &lt;code>CMD&lt;/code>&lt;/h3>
&lt;p>To override the &lt;code>CMD&lt;/code> that is defined in the Dockerfile (&lt;em>default&lt;/em> argument), you just pass the argument(s) after the image name:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">docker run &lt;span class="nb">test&lt;/span> &lt;span class="s1">&amp;#39;another hello world&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">another hello world
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This method also overrides the &lt;code>CMD&lt;/code> whether it&amp;rsquo;s used in combination with &lt;code>ENTRYPOINT&lt;/code> instruction or not.&lt;/p>
&lt;h3 id="overriding-entrypoint">Overriding &lt;code>ENTRYPOINT&lt;/code>&lt;/h3>
&lt;p>Given this Dockerfile:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> ubuntu&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENTRYPOINT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;echo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Hello world&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>When you have a Dockerfile with only an &lt;code>ENTRYPOINT&lt;/code> (i.e. no &lt;code>CMD&lt;/code>), you need to use the &lt;code>--entrypoint&lt;/code> flag to override the entry-point command as the following:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># docker run --entrypoint &amp;lt;command&amp;gt; &amp;lt;image&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker run --entrypoint &lt;span class="s1">&amp;#39;printenv&amp;#39;&lt;/span> &lt;span class="nb">test&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HOSTNAME=7ffd59696373
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HOME=/root
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If you try to supply a command at runtime without specifying the &lt;code>--entrypoint&lt;/code> flag, Docker will treat the that command as additional arguments to the command specified in the &lt;code>ENTRYPOINT&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">docker run &lt;span class="nb">test&lt;/span> &lt;span class="s1">&amp;#39;printenv&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">Hello world printenv
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This is similar to an entry-point in Dockerfile like this: &lt;code>ENTRYPOINT [&amp;quot;echo&amp;quot;, &amp;quot;Hello world&amp;quot;, &amp;quot;printenv&amp;quot;]&lt;/code>&lt;/p>
&lt;h2 id="handing-over-execution-flow-from-entrypoint-to-cmd">Handing over execution flow from &lt;code>ENTRYPOINT&lt;/code> to &lt;code>CMD&lt;/code>&lt;/h2>
&lt;p>Consider the following Python Flask app:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> python:latest&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># ...&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># RUN &amp;gt;&amp;gt;&amp;gt; install Python packages &amp;amp; configs ...&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># COPY &amp;gt;&amp;gt;&amp;gt; add files and executables&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># ...&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENTRYPOINT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;uvicorn&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;main:app&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;--host&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;0.0.0.0&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The uvicorn command will be executed when the container runs, and the &lt;code>CMD&lt;/code> instruction will provide the necessary arguments for the uvicorn server.&lt;/p>
&lt;p>Usually, we need a way to include runtime configurations that our Flask app expects to be available in the run environment prior to executing the main application in the entry-point (e.g. &lt;code>uvicorn&lt;/code>). These configurations could be starting a service, exporting environment variables, running a database migration script, or simply editing certain configuration files.&lt;/p>
&lt;p>This type of commands (runtime commands) cannot be included in &lt;code>RUN&lt;/code> stages, and it is an anti-pattern and honestly quite ugly to cram a lot of shell commands into the &lt;code>ENTRYPOINT&lt;/code> and/or &lt;code>CMD&lt;/code> sections.&lt;/p>
&lt;h3 id="enter-docker-enterypointsh">Enter &amp;ldquo;docker-enterypoint.sh&amp;rdquo;&lt;/h3>
&lt;p>When developing a Dockerfile, it is a common pattern to wrap various initialization commands within a shell script, conventionally named &amp;lsquo;docker-entrypoint.sh&amp;rsquo; or &amp;rsquo;entrypoint.sh&amp;rsquo; and execute it using an &lt;code>ENTRYPOINT&lt;/code> instruction prior to running the main app. The purpose of this technique is to provide a flexible way of configuring the Docker container environment &lt;em>at run time&lt;/em>.&lt;/p>
&lt;p>Since &lt;code>ENTRYPOINT&lt;/code> instruction provides run-time execution, we need to find a way to return the execution flow back the Dockerfile&amp;rsquo;s &lt;code>CMD&lt;/code> instruction to run the main application command.&lt;/p>
&lt;p>To do so, simply add an &lt;code>exec &amp;quot;@$&amp;quot;&lt;/code> statement at the very end of the shell script that is being executed by the &lt;code>ENTRYPOINT&lt;/code> (i.e. &amp;lsquo;docker-entrypoint.sh&amp;rsquo;) file.&lt;/p>
&lt;p>After adding all configuration scripts to &amp;lsquo;docker-entrypoint.sh,&amp;rsquo; we will modify the Dockerfile as follows:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> python:latest&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># ...&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># RUN &amp;gt;&amp;gt;&amp;gt; install Python packages &amp;amp; configs ...&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># COPY &amp;gt;&amp;gt; add our app&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># ....&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># Copy the init script file to a directory in the PATH&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># You might need to `chmod +x` it too&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> docker-entrypoint.sh /usr/local/bin &lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENTRYPOINT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;docker-entrypoint.sh&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;uvicorn&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;main:app&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;--host&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;0.0.0.0&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>To visualize the process:&lt;/p>
&lt;p>&lt;img src="https://demo.stack.jimmycai.com/p/docker-cmd-and-entrypoint-differences/visual1.png"
width="1155"
height="437"
srcset="https://demo.stack.jimmycai.com/p/docker-cmd-and-entrypoint-differences/visual1_hu22bb2e668f1b020c51f48902814d7093_127716_480x0_resize_box_3.png 480w, https://demo.stack.jimmycai.com/p/docker-cmd-and-entrypoint-differences/visual1_hu22bb2e668f1b020c51f48902814d7093_127716_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="&amp;ldquo;Dockerfile example&amp;rdquo;"
class="gallery-image"
data-flex-grow="264"
data-flex-basis="634px"
>&lt;/p>
&lt;p>When we run the container, Docker will execute the &lt;code>ENTRYPOINT&lt;/code>, which contains the &amp;ldquo;docker-entrypoint.sh&amp;rdquo; script. Then, the &lt;code>exec &amp;quot;$@&amp;quot;&lt;/code> command in the &amp;ldquo;docker-entrypoint.sh&amp;rdquo; script will, in a sense, return control to the &lt;code>CMD&lt;/code>. To clarify, the exec part won&amp;rsquo;t transfer execution flow; it just expands the arguments specified in the &lt;code>CMD&lt;/code> instruction in a new process.&lt;/p>
&lt;p>Let&amp;rsquo;s break down what &lt;code>exec &amp;quot;@$&amp;quot;&lt;/code> does:&lt;/p>
&lt;ul>
&lt;li>&lt;code>exec&lt;/code> is a Linux command used to replace the current process with a new process. In this case, it ensures that &lt;code>&amp;quot;$@&amp;quot;&lt;/code> becomes the main process running in the container.&lt;/li>
&lt;li>&lt;code>&amp;quot;$@&amp;quot;&lt;/code> expands to all the command-line arguments passed to the container when it starts (e.g. expanding the content of the &lt;code>CMD&lt;/code> instruction). It preserves the exact arguments that were passed during container runtime. Also, you still can override the &lt;code>CMD&lt;/code> by specifying args on the &lt;code>docker run&lt;/code> command. Finally, note that you cannot place any commands in the &amp;lsquo;docker-entrypoint.sh&amp;rsquo; file after the exec &amp;ldquo;$@&amp;rdquo; line.&lt;/li>
&lt;/ul></description></item><item><title>Helm basics</title><link>https://demo.stack.jimmycai.com/p/helm-basics/</link><pubDate>Tue, 30 May 2023 12:54:12 -0700</pubDate><guid>https://demo.stack.jimmycai.com/p/helm-basics/</guid><description>&lt;p>This post will cover the definition of Helm&amp;rsquo;s building blocks and basic commands.&lt;/p>
&lt;h2 id="why-helm">Why Helm?&lt;/h2>
&lt;p>When we intend to deploy an application to a K8s cluster, it&amp;rsquo;s important to know that Kubernetes doesn&amp;rsquo;t inherently understand our application&amp;rsquo;s requirements (and it shouldn&amp;rsquo;t).&lt;/p>
&lt;p>What I mean by that is Kubernetes doesn&amp;rsquo;t recognize that PVC &amp;ldquo;x&amp;rdquo; is associated with Deployment &amp;ldquo;y,&amp;rdquo; which, in turn, relies on Service &amp;ldquo;z&amp;rdquo;, and without these components, the application will not run as intended. All what Kubernetes knows is to manage its resources and thrive on keeping cluster&amp;rsquo;s objects alive.&lt;/p>
&lt;p>So we needed a way to &amp;ldquo;bundle&amp;rdquo; our Kubernetes application for better release management. We wanted to put the pieces together. Out API app needs a Deployment that requires a Service and we need a storage for that. So we all these parts should deployed, removed, updated, versioned, and shared together, becasue these parts represent a specific application.&lt;/p>
&lt;p>Helm is designed to know about our application. That&amp;rsquo;s why it&amp;rsquo;s called a package manager because it looks at our application&amp;rsquo;s K8s manifests as a group (package). It allows us to look at our Kubernetes application as &amp;ldquo;an application&amp;rdquo; rather than a collection of Kubernetes objects.&lt;/p>
&lt;h2 id="helm-chart">Helm Chart&lt;/h2>
&lt;p>A Helm Chart is a &lt;strong>packaged&lt;/strong>, &lt;strong>deployable unit&lt;/strong> that comprises &lt;strong>all configurations&lt;/strong> needed for deploying an application to a Kubernetes cluster.&lt;/p>
&lt;p>Let&amp;rsquo;s break this statement down:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Packaged: A Helm chart is a package for Kubernetes applications, similar to how a Debian apt package bundles software for easy installation on Linux.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Deployable unit: A Helm chart can be deployed to a K8s cluster, similar to the other K8s objects. It has all&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Includes all configuration files: Within a chart, you&amp;rsquo;ll add all the required K8s manifests (such as service, deployment, replicaset, etc.), that your application needs. Making it easy to deploy and manage our application within a Kubernetes cluster.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>By combining these three characteristics, you can deliver your application to any Kubernetes cluster of your choice easily. Not only that, but you can also share your chart (i.e. your applications) so others can deploy it to their cluster too.&lt;/p>
&lt;h2 id="helm-release">Helm Release&lt;/h2>
&lt;p>A Helm &amp;ldquo;release&amp;rdquo; is a running instance of a Helm chart. When you install a Helm chart, it generates a release with a unique name and version. You can install a chart multiple times, each will have its unique name, and optinally, you can use different variables and parameters.&lt;/p>
&lt;p>For example, when you install an Nginx chart, the &lt;em>installed instance&lt;/em> of the chart is called a &amp;ldquo;release&amp;rdquo;. You can have one or more Nginx releases deployed from the same chart; each installation has its unique name.&lt;/p>
&lt;h2 id="helm-repository">Helm Repository&lt;/h2>
&lt;p>A &amp;ldquo;repository&amp;rdquo; in Helm refers to a storage location where Helm charts are stored. Like any artifact repository, it can be accessed and shared. It can be a remote or local.You can interact with Helm repositories using the &lt;code>helm repo &amp;lt;command&amp;gt;&lt;/code> to add, update, or manage repositories.&lt;/p>
&lt;h2 id="helm-hub">Helm Hub&lt;/h2>
&lt;p>A &amp;ldquo;hub&amp;rdquo; refers to a centralized &lt;strong>platform&lt;/strong> that hosts a collection of repositores such as the default one Artifact Hub (&lt;a class="link" href="https://artifacthub.io/" target="_blank" rel="noopener"
>artifacthub.io&lt;/a>). These hubs provide a user-friendly interface for discovering and exploring Helm repositories.&lt;/p>
&lt;h3 id="helm-hub-vs-repo">Helm Hub vs. Repo&lt;/h3>
&lt;p>Think of Helm repositories like &lt;em>storage&lt;/em> places where Helm charts are stored and Helm hub is like a platform that offers a &lt;em>search&lt;/em> service to find Helm charts from different repositories. So basically, Helm Hub makes it easy to find and interact with Helm charts, while Helm repositories store the actual chart files.&lt;/p>
&lt;h2 id="commands-cheat-sheet">Commands cheat sheet&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Helm works similarly to Linux package managers:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 1. You add, update, or delete a repository,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 2. Install, and delete Helm charts.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># By default, Helm uses https://artifacthub.io for charts. &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Helm deploys K8s resources, this means that Helm is aware of K8s namespaces.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Helm will always use the default namespace of the currently activated context &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># in your K8s cluster. &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Similar to kubectl, use the &amp;#39;-n&amp;#39; flag to interact with K8s namespaces &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># while working with Helm commands.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Search the default Helm hub&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm search hub &amp;lt;chartName&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Add a repo to your local helm setup&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm repo add bitnami https://charts.bitnami.com/bitnami
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Refresh helm packages list&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm repo update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Show added repos&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm repo list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Search for a chart in the previously added repos.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># The `CHART VERSION` shows the chart&amp;#39;s version, and&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># the `APP VERSION` column shows the application&amp;#39;s version (e.g. Nginx&amp;#39;s version).&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># This command will list the latest version available in the repository.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm search repo &amp;lt;chartName&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># List all `APP VERSION` for a specific package&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm search repo --versions &amp;lt;chartName&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Install a chart:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># You can install the same chart multiple times with different names.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Chart names must be unique. A running instance of a chart is called `release`.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Sticking to a naming scheme for your releases is always a good idea.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm install &lt;span class="o">[&lt;/span>specify-release-name&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>chart-name&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm install my-release-1 bitnami/nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm install my-release-2 bitnami/nginx -n dev-namespace
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># List installed packages&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm ls
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm ls -a &lt;span class="c1"># list `all` including failing deployments&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm ls --all-namespaces
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Uninstall a chart&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm uninstall my-release-1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Download (+ unpack) the chart but don&amp;#39;t install it &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm pull --untar bitnami/wordpress
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Once downloaded, you can install the chart&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm install &lt;span class="o">[&lt;/span>release-4&lt;span class="o">]&lt;/span> ./&amp;lt;chart&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm install my-release ./wordpress
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Install a specific version of a chart (this is `CHART VERSION`)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm install &lt;span class="o">[&lt;/span>release&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>repo/chart&lt;span class="o">]&lt;/span> --version &lt;span class="o">[&lt;/span>version&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm install my-release bitnami/nginx --version 9.9.4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Upgrade a release to the latest version available in the repo.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># use `--version` followed by chart version number to upgrade to &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># a certain version.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm upgrade &lt;span class="o">[&lt;/span>release&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>chart&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm upgrade my-release bitnami/nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># You can &amp;#39;downgrade&amp;#39; using the same command but with an older `--version` number&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm upgrade my-release bitnami/nginx --version 9.9.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># The upgrade command also takes variables updating flags. &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Here, we are changing the default service type of Nginx &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># from LoadBalancer to a NodePort and the default value of &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># the port from 80 to 8181&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm upgrade my-release --set service.type&lt;span class="o">=&lt;/span>NodePort --set service.ports.http&lt;span class="o">=&lt;/span>&lt;span class="m">8181&lt;/span> bitnami/nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># To retain the previously modified values when upgrading a release&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm upgrade my-release --version 9.9.5 --reuse-values bitnami/nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Show details of a chart without installing it&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm show chart bitnami/nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Helm `get` to pull extended info about a release&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># you can get release&amp;#39;s -&amp;gt; &amp;#39;manifest&amp;#39;, &amp;#39;values&amp;#39;, &amp;#39;notes&amp;#39;, &amp;#39;hooks&amp;#39;, &amp;#39;all&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm get manifest &lt;span class="o">[&lt;/span>releaseName&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm get values &lt;span class="o">[&lt;/span>releaseName&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm get all &lt;span class="o">[&lt;/span>releaseName&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Get status of a release (deplyed, failed ...etc)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm status &lt;span class="o">[&lt;/span>release&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># List all available values in a chart without downloading it.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># if you&amp;#39;re looking for specific flag, pipe the output to grep i.e. &amp;#39; | grep &amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm show values &lt;span class="o">[&lt;/span>repo/chart&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm show values bitnami/apache &lt;span class="p">|&lt;/span> grep replicaCount
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Then to update a default variable, use the &amp;#39;--set&amp;#39; flag&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm install apache-release bitnami/apache --set &lt;span class="nv">replicaCount&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Control the output using -o [options]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">helm search hub nginx-ingress -o yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>